services:
# SERVICIOS ADICIONALES 
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API S3 de MinIO
      - "9001:9001"  # Consola web de MinIO
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    volumes:
      - ./minio_data:/data
    networks:
      - some-network
      
  appservice:
    build: 
      context: ./app
      dockerfile: Dockerfile.app
    container_name: my_app
    ports:
      - "8989:8989"  # Exponer FastAPI

    restart: always  # Para que se reinicie si falla
    command: >
      sh -c "uvicorn main:app --host 0.0.0.0 --port 8989"
    networks:
      - some-network
  
  train_models:
    build: 
      context: ./train_models
      dockerfile: Dockerfile.app
    container_name: train_models
    ports:
      - "8888:8888"  # Exponer FastAPI
 
    restart: always
    command: >
      sh -c "jupyter notebook --notebook-dir=/home/jovyan/work --ip 0.0.0.0 --port 8888 --allow-root --no-browser"
    networks:
      - some-network
    volumes:
    - ./train_models:/home/jovyan/work

  mysql: # Servicio para MySQL.
    image: mysql:latest # Imagen de MySQL.
    ports:
      - "3306:3306" # Expone el puerto 3306.
    environment:
      MYSQL_ROOT_PASSWORD: airflow   # Contraseña del usuario root de MySQL.
      MYSQL_DATABASE: penguin_data   # Base de datos predeterminada.
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"] # Verificación de disponibilidad de MySQL.
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always # Reinicia el servicio siempre que sea necesario.
    
    volumes:
      - mysql_data:/var/lib/mysql # Monta un volumen para los datos de MySQL.
    networks:
      - some-network
  
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflowpassword
      POSTGRES_DB: mlflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - some-network

# Volúmenes de Docker
volumes:
  postgres-data: # Volumen para almacenar prcesamiento de datos
  mysql_data: # Volumen para almacenar los datos de MySQL
  train_models: # Volumen para almacenar los notebooks de Jupyter

networks:
  some-network:
    driver: bridge